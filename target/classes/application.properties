# ==========================================
#     AEROPARKER CUSTOMER REGISTRATION
#           CONFIGURATION PROPERTIES
# ==========================================
#
# This file contains all configuration properties for the AeroParker
# customer registration application. Properties are organized by
# functional area and include both development and production settings.
#
# Author: AeroParker Development Team
# Version: 1.0
# Last Updated: 2024-01-01
#
# Configuration Notes:
# - H2 database is configured for development/testing
# - MySQL configuration is provided for production deployment
# - Thymeleaf caching is disabled for development
# - Debug logging is enabled for troubleshooting
# ==========================================

# ==========================================
#         SERVER CONFIGURATION
# ==========================================
# Web server configuration for the embedded Tomcat server

# Port number for the application server
# Default: 8080 (standard development port)
# Production: Consider using 80 (HTTP) or 443 (HTTPS)
server.port=8080

# ==========================================
#        DATABASE CONFIGURATION
# ==========================================
# Database connection settings for different environments

# MySQL Configuration (PRODUCTION)
# Uncomment these lines when deploying to production with MySQL
# Ensure MySQL server is running and database exists

# MySQL JDBC connection URL with additional parameters:
# - createDatabaseIfNotExist=true: Automatically creates database if missing
# - useSSL=false: Disables SSL for local development (enable in production)
# - serverTimezone=UTC: Sets timezone to prevent timezone issues
# spring.datasource.url=jdbc:mysql://localhost:3306/aeroparker_customers?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC

# MySQL database credentials
# spring.datasource.username=root
# spring.datasource.password=password

# MySQL JDBC driver class
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# H2 Database Configuration (DEVELOPMENT/TESTING)
# In-memory database that's perfect for development and testing
# Data is lost when application stops - ideal for clean testing

# H2 in-memory database URL
# mem:testdb creates a temporary database in memory
spring.datasource.url=jdbc:h2:mem:testdb

# H2 database driver
spring.datasource.driverClassName=org.h2.Driver

# H2 default credentials (no authentication required for in-memory)
spring.datasource.username=sa
spring.datasource.password=password

# H2 Console Configuration
# Enables web-based database console for development
# Access at: http://localhost:8080/h2-console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# ==========================================
#           JPA/HIBERNATE CONFIGURATION
# ==========================================
# Object-Relational Mapping (ORM) configuration

# Database dialect configuration
# Tells Hibernate which SQL dialect to use for query generation
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# For MySQL deployment, use: org.hibernate.dialect.MySQL8Dialect

# Schema generation strategy
# create-drop: Creates schema on startup, drops on shutdown (development)
# validate: Validates schema without changes (production)
# update: Updates schema as needed (staging)
# none: No automatic schema management (production with manual scripts)
spring.jpa.hibernate.ddl-auto=update

# SQL Logging Configuration
# Shows generated SQL queries in console (useful for debugging)
# Disable in production for performance and security
spring.jpa.show-sql=true

# Formats SQL output for better readability
spring.jpa.properties.hibernate.format_sql=true

# ==========================================
#        THYMELEAF TEMPLATE CONFIGURATION
# ==========================================
# Server-side template engine configuration

# Template caching - disabled for development to see changes immediately
# Enable in production (spring.thymeleaf.cache=true) for performance
spring.thymeleaf.cache=false

# Template file location
# Templates are loaded from src/main/resources/templates/
spring.thymeleaf.prefix=classpath:/templates/

# Template file extension
# All template files should end with .html
spring.thymeleaf.suffix=.html

# ==========================================
#           LOGGING CONFIGURATION
# ==========================================
# Application logging levels for debugging and monitoring

# Application-specific logging
# DEBUG level shows detailed information for troubleshooting
# Change to INFO or WARN in production
logging.level.com.aeroparker=DEBUG

# Spring Web MVC logging
# Shows request/response details and controller mappings
# Useful for debugging endpoint issues
logging.level.org.springframework.web=DEBUG

# Additional logging configurations for production:
# logging.level.org.springframework.security=DEBUG  # Security debugging
# logging.level.org.hibernate.SQL=DEBUG             # SQL query logging
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE  # SQL parameter values

# ==========================================
#        ADDITIONAL PRODUCTION SETTINGS
# ==========================================
# Additional settings to consider for production deployment

# Security settings (uncomment for production)
# server.ssl.enabled=true
# server.ssl.key-store=classpath:keystore.p12
# server.ssl.key-store-password=password
# server.ssl.key-store-type=PKCS12

# Connection pool settings for production
# spring.datasource.hikari.maximum-pool-size=20
# spring.datasource.hikari.minimum-idle=5
# spring.datasource.hikari.connection-timeout=20000

# Application settings
# spring.application.name=aeroparker-customer-registration
# management.endpoints.web.exposure.include=health,info,metrics
